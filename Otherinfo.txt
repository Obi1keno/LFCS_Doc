--- Boot process ---
Boot process : Power ON -> BIOS -> Master Boot Record(MBR) -> Boot loader(GRUB) -> Kernel(Linux) -> Intial Ram Disk(initramfs image) -> /sbin/init(Parent process, systemd) -> shell -> XWindows system.
--- Files ---
Linux files : everything in linux is a file.
Shareable vs Non Shareable : can or cannot be shared with differents hosts (Home directory can be share, Lock files cannot be).
Variable vs Static : Log files are variable, binaries are static files.
--- Linux Filesystem Hierarchy Standard : FHS ---
/bin -> /usr/bin : common non essential binaries, executable programs and scripts, used by user and sysadmin(awk, mkdir, vi).
/sbin -> /usr/sbin : essential binaries for booting, restoring, recovering or reparing, used by sysadmin(fdisk, getty, halt, ifconfig, init, mkfs, reboot).
/lib -> /usr/lib : libraries needed to executes binaries, important for boot and running.
/lib64 -> /usr/lib64 : 64bits libraries.
Kernel modules: stored under /lib/modules/xyz = code that can be loaded or unloaded w/ reboot.
PAM : Pluggable Authentification Modules, stored in /lib/security, used for dynamic authentification support for apps and services.
/boot : all data needed for system to boot before executing usermode, vmlinuz (compressed linux kernel) 1..n + initramfs (intial ram filesystem) 1..n.
/dev : contains devise nodes, a special device files that represent devices built into or connected to the system (essential for system running, byte stream, I/O devices, etc), execluding network devices. can be a real FS a virtual speudo filesystem (memory only) or middle point (Linux devtmpsfs).
/proc : mount point for pseudo-filesystem (only in RAM), each process have a subdirectory here with info like ressource or history (empty on non running system, contains one line), also give info about hardware, system and interface.
/sys : mount point for system pseudo-filesystem (only in RAM), used to gather info about system and can modify its behavior while running (contains one line).
Pseudo file system: /proc /dev /sys - resides only in memory (fake fs) - dynamicaly generate files when accessed.
/run : Pseudo-filesystem (Only in RAM) with a tmpfs ramdisk like /dev/shm, Store "transient files" that contain runtime info which may be written on early system startup.
/etc : machine local configuration files and some startup scripts.
/home : users home directories
/root : root user home directory
/media : mount FS or removable media (USB, CD).
udev : in modern linux, udev mount automatically removable media under /media.
/mnt : used my sysadmin to mount temporary FS or shares (NFS, SAMBA, CIFS or AFS).
/opt : program files , for software packages like skype (/opt/skype/bin, /opt/skype/man).
/srv : should normally be used for serving files (www, ftp, rsync) but rarely used.
/tmp : temporary files.
/usr : "Secondary Hierarchy", not needed for booting, need to reside on different partition than /.
/var : variable or volatile data that change a lot (like logs).
--- Partition, filesystem, Mount and umount ---
Partition : logical part of the disk. (Windows : disk1, Linux : /dev/sda1).
FileSystem : method of storing and finding files. (Windows : NTFS/FAT, Linux : EXT3,EXT4,XFS.).
Mounting parameters : For windows, drive letters C:, D:, for Linux mount point /, /usr.
Mount points : each FileSystem is mounted on a mount point usualy an empty directory (on a hard disk partition), example : /dev/sda -> /dev/sda1(device node) => "/boot"(mount point), -> /dev/sda2 => "/", -> /dev/sda3 => "/home".
Base folder where OS is stored : Windows : C: , Linux : /.
UUID: identifier for block devices (/dev/sdaX), you can generate one by using "cat /proc/sys/kernel/random/uuid" or using the library libuuid used by "uuidgen"
mount output :
$ /dev/mapper/centos-root on / type xfs (rw,relatime,seclabel,attr2,inode64,noquota)
$ proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
form of output :
$ fs_spec on fs_file type fs_vfstype (fs_mntopts)
fs_spec : Block device or remote filesystem to be mounted (device node/location).
fs_file : mount point for the filesystem.
fs_vfstyp : type of the filesystem(list of filesystems : cat /proc/filesystems).
fs_mtopts : mount options associated with the filesystem (rw,relatime,...etc., List of options can be found on man mount).
--- NFS ---
NFS(Network FileSystem) : is a shared filesystem through network to stock/store data (others shared fs : SAMBA).
Example of /etc/exports :
/root/sharethis *.omarbistami.com (rw)
/home/student/project *.classroom.com (rwe)
--- Libraries ---
Static Lib: locked at compile time (part of the bin) and do not change -> +execution speed time.
Dynamic Lib: loaded at run time  (DLL in win), can be modified with recompiling the bin using them.
--- Processes ---
[kworker/0:0H] : Kernel process.
init or systemd : Process NÂ° 1, ancestor of all processes expect the kernel ones.
[kthreadd] : PID=2, adopter process for all zombie child processes.
Scheduler : controls processes (give the rights to run, etc.).
Context switch: switch of cpu from one process or thread to another managed by kernel.
setuid: s execute bit to execute a bin as an elevated user when needed (eg : passwrd - to change pw).
Process state: run - sleeping/waiting - stoped - zombie.
Kernel processes/threads : created by kernel, 2 types : internal( maintenance such as flushing buffers, balancing load, etc); external(runs in user space like normal apps) , example : kthreadd, migration (moving threads from CPU to another, I/O to disk).
Interactive processes : started by user at CLI or GUI, example : bash, firefox, top.
Batch processes : automatic processes that are scheduled, example : crontab, updatedb.
Daemons : server process that runs continuously, started by user or during system startup, waits for user or system to call them, example : httpd, sshd.
Threads : light weight processes, tasks that run under a main process sharing memory and ressource (same PID but differents TID : process ID internally), example : Firefox, gnome.
file descriptors: table created and updated when files are opened , contains INT values (Process table for files opened by procs).
Real time priority : can be assigned to time-sensitive tasks.
Hard real time : making sur a job is completed within a time window.
Load average : average of load number for a given time, include (Proc running on CPU, runnable in queue and sleeping waiting I/O)
Load average example : 0.41, 0.12, 0.08
                      0.41 for last 1 minute 41% of system utilized.
                      0.12 for last 5 minutes 12% of system utilized.
                      0.08 for last 15 minutes 8% of system utilized.
                      if quad CPU : 4.00 => 100% of each CPU utilized at the last minute.
--- PS ---
BSD : ps aux - vsz : process virtual memory in kb, rss : resident set size (non-swapped physical memory a task is usingin kb), stat : state of process (S:leeping, R:unning), < : High priority, N : Low priority, L : page locked in memory, s : session leader, l : multithreaded, + : forground process group.
--- TOP ---
First line : uptime, users, load average
Second line : Total number of proc, running proce, sleeping, stopped, zombie.
Third line : CPU Time dvided by : us(users), sy(kernel), ni(niceness - low priority), id(idle - low if load average is high), wa(waiting for I/O), hi(hardware), st(vs software), st(steal time for virtual machine).
Forth line : physical memory (RAM), total, free, used, buff/cache.
Fifth line : swapped memory (swap), total, free, used, available memory.
Process list : PID, User, PR(priority), NC(nice value), VIRT(virtual memory), RES(physical memory), SHR(shared memory), S(Status: Running,Sleeping,etc.), %CPU(CPU usage), %MEM(Memory usage), TIME(execution time),COMMAND(command executed).
m : (Interactive key) Memory info.
A : (Interactive key) sort by ressource consumers (top cpu user, top ram user, etc.).
r : (Interactive key) renice a PID.
k : kill a process.
Shift + m : sort by memory usage.
--- Crontab ---
MIN : minutes from 0 to 59.
HOUR : hours from 0 to 23.
DOM : day of the month from 1 to 31.
MON : months from 1 to 12.
DOW : Day of the week from 0 to 6 (0 = sunday).
CMD : command to be executed.
--- Execution mode ---
execution mode: user mode(isolated own memory space including root user) and kernel mode (system calls full access to cpu & hardwares).
Shell commands: some cmd are built into shell (do not need load, fork or exec) like echo, kill, etc.
--- Network ---
Socket descriptors: same as file descriptors for network socket.
--- System info ---
System core files: if a prog is terminated abnormally a core file with a memory image is created and stored. (/var/crash, /var/cache/abrt, etc.).
System V IPC: Inter Process Communication (Shared Memory, Semaphores and message queue).
--- Hard and Soft links ---
inode : index node, is a data structure that describes a filesystem object (file or directory), storing the attributes (permission, file owner) and disk block location of the object.
Hard link (same inode) : additional name for files only, allowing to access a file from a different directory.
Soft link (different inode): also called SymLink, is a special file pointing to another file, directory or a remote share like NFS (shortcut), deleting the file break the symlink.
--- Standard file streams/Descriptors ---
stdin : standard input (0) , example : keyboard.
stdout : standard output (1), example : terminal.
stderr : standard error (2), example : log file.
---  Wildcards and matching file names ---
? : matchs any signle character.
* : matchs a string of characters.
[abc] : matchs occurence of "a", "b" or "f".
[!abc] : matchs occurence not in "a", "b" or "f"
--- Package management ----
Type of package: Binary(files ready for deployement, architecture dependent, compiled for each sys) , source(used to generate bin , used for multi architecture).
package management systems: low(rpm), high(yum, dnf, zypper) for RHEL, Centos | low (dpkg), high(apt-get, apt-cache).
--- RPM : RedHat Package Manager ---
rpm naming format: binary : <name>-<version>-<release>.<distros>.<architecture>.rpm eg : sed-4.2.1-10.el6.x86_64.rpm | source <name>-<version>-<release>.<distros>.rpm , eg : sed-4.2.1-10.el6.src.rpm
/var/lib/rpm : dir that holds rpm database files (berkley db hash files) overriden by --dbpath.
rpmrc : file to specify defautl settings for RPM, overrriden by --rcfile.
rpm installation tasks : 1 dependecies check, 2 Conflict Check, 3 exec cmd requiered before install, 4 deals with Conf files, 5 unpack and install files (w/ permissions, etc.), execute cmd after install, update RPM database.
Upgrading kernel : Install new version of Kernel needs reboot, do not use -U when installing or current kernel will be lost and you can't rollback to old kernel. (use -ivh)
--- YUM : Yellow Dog Updater Modified ---
Repositroy config files : are kept in /etc/yum.repos.d/ & have a .repo extension.
Repository file example :
                        [repo-name]
                        name=Description of the repos
                        baseurl=http://somesystem.com/path/torepo
                        enabled=1
                        gpgcheck=1 #integrity checking should alwayz be 1
Conf files : if a package has it conf file updated , the old one will be renamed : "conf_file.rpmsave" , if old conf file can still work after update, the new one will be : "conf_file.rpmnew"
--- DNF : Dannified YUM ---
dnf : Next generation replacement for yum, it has better memory usage and improve yum iterative dependency resolution.
